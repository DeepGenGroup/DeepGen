typedef struct _DevicePtrInfo {
    CUdeviceptr dev_ptr;
    bool valid;
} DevicePtrInfo;

static inline DevicePtrInfo getPointer(PyObject *obj, int idx) {
    DevicePtrInfo ptr_info;
    ptr_info.dev_ptr = 0;
    ptr_info.valid = true;
    if (PyLong_Check(obj)) {
        ptr_info.dev_ptr = (CUdeviceptr)PyLong_AsUnsignedLongLong(obj);
        return ptr_info;
    }
    if (obj == Py_None) {
        return ptr_info;
    }
    PyObject *ptr = PyObject_GetAttrString(obj, "data_ptr");
    if (ptr) {
        PyObject *empty_tuple = PyTuple_New(0);
        PyObject *ret = PyObject_Call(ptr, empty_tuple, NULL);
        Py_DECREF(empty_tuple);
        Py_DECREF(ptr);

        if (!PyLong_Check(ret)) {
            PyErr_SetString(PyExc_TypeError, "data_ptr method of Pointer object must return 64-bit int");
            ptr_info.valid = false;
            return ptr_info;
        }

        ptr_info.dev_ptr = (CUdeviceptr)PyLong_AsUnsignedLongLong(ret);
        if (!ptr_info.dev_ptr) {
            Py_DECREF(ret);
            return ptr_info;
        }

        // Verify the pointer is accessible by CUDA
        CUpointer_attribute attributes[] = {CU_POINTER_ATTRIBUTE_DEVICE_POINTER};
        CUresult status;
        void* data;
        
        status = cuPointerGetAttribute(&data, CU_POINTER_ATTRIBUTE_DEVICE_POINTER, ptr_info.dev_ptr);
        if (status != CUDA_SUCCESS) {
            PyErr_Format(PyExc_ValueError, "Pointer argument (at %d) cannot be accessed from CUDA (CPU tensor?)", idx);
            ptr_info.valid = false;
        }
        
        Py_DECREF(ret);
        return ptr_info;
    }

    // No valid pointer found
    PyErr_SetString(PyExc_TypeError, "Pointer argument must be either uint64 or have data_ptr method");
    ptr_info.valid = false;
    return ptr_info;
}